var express = require("express");
var router = express.Router();
const nodemailer = require("nodemailer");
const Form = require("../models/form");
const User = require("../models/user");
const sessionChecker = require('../middleware/auth');

router.post("/api/newForm", async (req, res, next) => {
    const user1 = req.session.user;
    const user1Form = await Form.findOne({idAuthor: user1._id});
    if (user1Form) {
        console.log('–û–±–Ω–æ–≤–ª—è–µ—Ç!')
        const {metro, interest, budget, about} = req.body;

        user1Form.location = metro;
        user1Form.interest = interest;
        user1Form.data = new Date();
        user1Form.about = about;
        user1Form.prise = budget;
        user1Form.save();
        res.json({text: "–ê–Ω–∫–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!"});
    } else {
        console.log('–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –≤–Ω–∫–µ—Ç—É!')

    const {metro, interest, budget, about} = req.body;

    const form = new Form({
        idAuthor: req.session.user._id,
        location: metro,
        interest,
        data: new Date(),
        about,
        likes: [],
        funs: [],
        prise: budget
    });
    try {
        await form.save();
        res.send("form is save");
    } catch (e) {
        res.send("form is NO save");
    }
    res.send("ok");
}
});

router.route("/api/sendLikeMail").post(async (req, res, next) => {
    try {
        console.log("–ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å");
        const user1 = req.session.user;
        const user2ID = req.body;
        // console.log(user1._id);
        // console.log(user2ID.id);

        const user1Form = await Form.findOne({idAuthor: user1._id});
        const user2Form = await Form.findOne({idAuthor: user2ID.id });

        // const user2 = await  User.findOne({id: user2ID.id });

        if (user2Form.funs.includes(user1Form.idAuthor)) {                                                   //1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ª–∞–π–∫
            console.log('reapeat like')
            res.json({text:"–í—ã —É–∂–µ —Å—Ç–∞–∏–≤–ª–∏ –ª–∞–π–∫ –¥–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!"});
        } else {
            console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ª–∞–π–∫ –ø—Ä–æ–π–¥–µ–Ω–∞!')
            if (user2Form.likes.includes(user1Form.idAuthor)) {                                           // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –ª–∞–π–∫–Ω—É–ª–∏ –Ω–∞ –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫
                console.log('—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –µ—Å—Ç—å')
                async function main() {                                                                    //6. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ç–æ–º —á—Ç–æ –º—ã –µ–º—É –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫
                    let testAccount = await nodemailer.createTestAccount();
                    const transporter = nodemailer.createTransport({
                        host: "smtp.yandex.ru",
                        port: 465,
                        secure: true,
                        auth: {
                            user: "pekarnyavkusnaya",
                            pass: "pekarnyavkusnaya111"
                        }
                    });

                    let info = await transporter.sendMail({
                        from: '"Roomroom üëª" <pekarnyavkusnaya@yandex.ru>', // sender address
                        to: `igordg@mail.ru`,  // list of receivers  user2.email,
                        subject: "Roomroom ‚úî", // Subject line
                        text: "–¢–µ–∫—Å—Ç1", // plain text body
                        html:
                            `<img src="https://gorod.tomsk.ru/uploads/33808/1240896561/my_room.jpg" alt="RoomRoom"><br>
                            <b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ù–∞ —Å–µ—Ä–≤–∏—Å–µ RoomRoom –ø–æ—è–≤–∏–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–µ–ª –±—ã –≤–º–µ—Å—Ç–µ —Å –í–∞–º–∏ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É!</b>
                                <p>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user1.first_name} ${user1.last_name}</p>
                                <p>–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –í–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ RoomRoom –≤ —Ä–∞–∑–¥–µ–ª–µ "–°–æ–≤–ø–∞–¥–∞–Ω–∏—è"</p> `
                    });
                    console.log("Message sent: %s", info.messageId);
                    console.log("Preview URL: %s", nodemailer.getTestMessageUrl(info));
                    res.send("–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!");
                }
                main().catch(console.error);

                user1Form.likes.push(user2Form.idAuthor);
                console.log(user1Form, user2Form);
                user1Form.—Åomparison.push(user2Form.idAuthor);                                            // 3. –∑–∞–ø–∏—Å—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –∞–Ω–∫–µ—Ç—ã –¥–≤—É—Ö —é–∑–µ—Ä–æ–≤
                user2Form.—Åomparison.push(user1Form.idAuthor);
                user2Form.funs.push(user1Form.idAuthor)
                user1Form.save();
                user2Form.save();
                res.json({text: "–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ!"});
            } else {
                console.log('–≤–∑–∞–∏–º–Ω–æ–≥–æ –ª–∞–π–∫–∞ –Ω–µ—Ç, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–µ–±—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –ª–∞–π–∫–∏')

                async function main() {                                                                    //6. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ç–æ–º —á—Ç–æ –º—ã –µ–º—É –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫
                    let testAccount = await nodemailer.createTestAccount();
                    const transporter = nodemailer.createTransport({
                        host: "smtp.yandex.ru",
                        port: 465,
                        secure: true,
                        auth: {
                            user: "pekarnyavkusnaya",
                            pass: "pekarnyavkusnaya111"
                        }
                    });

                    let info = await transporter.sendMail({
                        from: '"Roomroom üëª" <pekarnyavkusnaya@yandex.ru>', // sender address
                        to: `igordg@mail.ru`,  // list of receivers  user2.email,
                        subject: "Roomroom ‚úî", // Subject line
                        text: "–¢–µ–∫—Å—Ç1", // plain text body
                        html:
                            `<img src="https://gorod.tomsk.ru/uploads/33808/1240896561/my_room.jpg" alt="RoomRoom"><br>
                            <b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ù–∞ —Å–µ—Ä–≤–∏—Å–µ RoomRoom —É –í–∞—Å –ø–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ –ª–∞–π–∫–∏!</b>
                                <p>–õ–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${user1.first_name} ${user1.last_name}</p>
                                <p>–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –í–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ RoomRoom</p>`
                    });
                    console.log("Message sent: %s", info.messageId);
                    console.log("Preview URL: %s", nodemailer.getTestMessageUrl(info));
                    res.send("–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!");
                }
                main().catch(console.error);
                user1Form.likes.push(user2Form.idAuthor);                                                  //5. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å–≤–æ–π –º–∞—Å—Å–∏–≤ –ª–∞–π–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫
                user2Form.funs.push(user1Form.idAuthor)                                                     // 6.–∑–∞–ø–∏—Å—å –Ω–∞—Å –≤ –º–∞—Å—Å–∏–≤ "–ø–æ–∫–ª–æ–Ω–Ω–∏–∫–æ–≤" –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user1Form.save();
                user2Form.save();
                // console.log(user1Form.likes);
                // console.log(user2Form.funs);
                res.json({text: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä–æ–º—É –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —Å–æ–≤–º–µ—Å—Ç–Ω–æ —Å–Ω–∏–º–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É!"})
            }
        }
  } catch (error) {
    next(error);
  }
});

router.post("/api/findSimilarUsers", sessionChecker, async (req, res, next) => {
  try {
    await console.log("–ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å");
    let user = req.session.user;
    const userForm = await Form.findOne({ idAuthor: user._id });
    if(userForm) {
        console.log('–†–∞–±–æ—Ç–∞–µ—Ç! –ê–Ω–∫–µ—Ç–∞ –µ—Å—Ç—å!')

        let arr1 = userForm;
        // console.log(arr1);
        let arr2 = [];
        let arr3 = await Form.find();
        for (let i = 0; i < arr3.length; i++) {
            if (arr1.location === arr3[i].location) {
                arr2.push(arr3[i]);
            }
        }
        let allComparison = [];

        arr2.map(function (e) {
            let —Åomparison = [];
            let userId = {idAuthor: e.idAuthor};
            let location = {location: e.location};
            let data = {data: e.data};
            let about = {about: e.about};
            let likes = {likes: e.likes};
            let prise = {prise: e.prise};
            // let age = {age: e.age};
            // let nativeLocation = {nativeLocation: e.nativeLocation};


            —Åomparison.push(userId);
            —Åomparison.push(location);
            —Åomparison.push(data);
            —Åomparison.push(about);
            —Åomparison.push(likes);
            —Åomparison.push(prise);
            // —Åomparison.push(age);
            // —Åomparison.push(nativeLocation);



            let arrInterests = [];
            for (let i = 0; i < arr1.interest.length; i++) {
                for (let k = 0; k < e.interest.length; k++) {
                    if (arr1.interest[i] === e.interest[k]) {
                        arrInterests.push(arr1.interest[i]);
                    }
                }
            }
            —Åomparison.push(arrInterests);
            allComparison.push(—Åomparison);
        });

        let lengthAllComparison = [];
        for (let i = 20; i >= 0; i--) {
            for (let j = 0; j < allComparison.length; j++) {
                if (allComparison[j][6].length === i) {
                    lengthAllComparison.push(allComparison[j]);
                }
            }
        }

        let finishREsult = [];

        for (let i = 0; i < lengthAllComparison.length; i++) {
            if (lengthAllComparison[i][6].length !== 0) {
                finishREsult.push(lengthAllComparison[i]);
            }
        }

        sortUserPrise = [];


        for (let i = 0; i < finishREsult.length; i++) {
            if (finishREsult[i][5].prise <= (arr1.prise + 5)) {
                sortUserPrise.push(finishREsult[i]);
            }
        }

        // console.log(sortUserPrise);
        let arrSortUserId = [];

        for (let i = 0; i < sortUserPrise.length; i++) {
            arrSortUserId.push(sortUserPrise[i][0].idAuthor)
        }

        // let arrSortUserIdWithMe = [];
        //
        // for (let i = 0; i < sortUserPrise.length; i++) {
        //     arrSortUserIdWithMe.push(sortUserPrise[i][0].idAuthor)
        // }
        //
        // let arrSortUserId = [];
        //
        // for (let i = 0; i < arrSortUserIdWithMe.length; i++) {
        //     if(arrSortUserIdWithMe[i] !== userForm.idAuthor)
        //     arrSortUserId.push(arrSortUserIdWithMe[i])
        // }

        // console.log(arrSortUserId);

        const baseSortFormsId = await Form.find({idAuthor: arrSortUserId});
        const baseSortUsersId = await User.find({_id: arrSortUserId});


        let gradationUsers = [];
        let gradationForms = [];

        for (let i = 0; i < arrSortUserId.length; i++) {
            for (let k = 0; k < baseSortUsersId.length; k++) {
                if (arrSortUserId[i] === baseSortUsersId[k].id) {
                    gradationUsers.push(baseSortUsersId[k]);
                }
            }
        }

        for (let i = 0; i < arrSortUserId.length; i++) {
            for (let k = 0; k < baseSortFormsId.length; k++) {
                if (arrSortUserId[i] === baseSortFormsId[k].idAuthor) {
                    gradationForms.push(baseSortFormsId[k]);
                }
            }
        }

        let frontViewArr = [];

        for (let i = 0; i < gradationUsers.length; i++) {
            let obj = {
                id: "",
                location: "",
                interest: "",
                about: "",
                prise: "",
                first_name: "",
                // age: '',
                // nativeLocation: '',
                photo: "",
                —ÅomparisonInterests: ''
            };
            (obj.id = arrSortUserId[i]), (obj.location = gradationForms[i].location);
            obj.interest = gradationForms[i].interest;
            obj.about = gradationForms[i].about;
            obj.prise = gradationForms[i].prise;
            obj.first_name = gradationUsers[i].first_name;
            // obj.age = gradationUsers[i].age
            // obj.nativeLocation = obgradationUsers[i].nativeLocation
            obj.photo = gradationUsers[i].photo;
            obj.—ÅomparisonInterests = sortUserPrise[i][6];

            frontViewArr.push(obj);
        }


        let arrWhithoutOwnUserId = [];
        for (let i = 0; i < frontViewArr.length; i++) {
            if(frontViewArr[i].id !== user._id){
                arrWhithoutOwnUserId.push(frontViewArr[i])
                console.log( frontViewArr[i].id,  user._id)
            }
        }

        // console.log(frontViewArr[0])

        res.json(arrWhithoutOwnUserId);

    }else{
        console.log('–ê–Ω–∫–µ—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É!')
        res.json({error: '–ê–Ω–∫–µ—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É!'});
    }
  } catch (error) {
    next(error);
    console.log("–æ—à–∏–±–∫–∞");
  }
});

router.get("/api/likes/by", async (req, res) => {
  try {
    const { _id } = req.session.user;
    const form = await Form.findOne({ idAuthor: _id });
    if (!form) {
      res.status(200).json({ response: "noform" });
    } else {
      const users = await User.find({ _id: form.funs });
      const userIDs = users.map(user => {
        return user._id;
      });
      const forms = await Form.find({ idAuthor: userIDs });
      const formsUsers = [];
      for (let i = 0; i < forms.length; i++) {
        formsUsers.push({
          form: forms[i],
          id: users[i]._id,
          first_name: users[i].first_name,
          last_name: users[i].last_name,
          photo: users[i].photo,
          age: users[i].age,
          nativeLocation: users[i].nativeLocation,
        });
      }
      res.status(200).json({ response: formsUsers });
    }
  } catch (e) {
    res.status(400).json({ response: "fail" });
  }
});

router.get("/api/likes/mutual", async (req, res) => {
  try {
    const { _id } = req.session.user;
    const form = await Form.findOne({ idAuthor: _id });
    if (!form) {
      res.status(200).json({ response: "noform" });
    } else {
      const match = form["—Åomparison"];
      if (match.length !== 0) {
        const users = await User.find({ _id: match });
        const userIDs = users.map(user => {
          return user._id;
        });
        const forms = await Form.find({ idAuthor: userIDs });
        const formsUsers = [];
        for (let i = 0; i < forms.length; i++) {
          formsUsers.push({
            form: forms[i],
            id: users[i]._id,
            first_name: users[i].first_name,
            last_name: users[i].last_name,
            email: users[i].email,
            phone: users[i].phone,
            vk: users[i].vk,
            age: users[i].age,
            nativeLocation: users[i].nativeLocation,
            photo: users[i].photo
          });
        }
        res.status(200).json({ response: formsUsers });
      } else {
        res.status(200).json({ response: "nomatch" });
      }
    }
  } catch (e) {
    res.status(400).json({ response: "fail" });
  }
});

module.exports = router;
