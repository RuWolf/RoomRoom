var express = require("express");
var router = express.Router();
const nodemailer = require("nodemailer");
const Form = require("../models/form");
const User = require("../models/user");

router.post("/api/newForm", async (req, res, next) => {
    const {metro, interest, budget, about} = req.body;

    const form = new Form({
        idAuthor: req.session.user._id,
        location: metro,
        interest,
        data: new Date(),
        about,
        likes: [],
        prise: budget
    });
    try {
        await form.save();
        res.send("form is save");
    } catch (e) {
        res.send("form is NO save");
    }
    res.send("ok");
});

router.route("/api/sendLikeMail").get(async (req, res, next) => {
    try {
        await console.log("–ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å");
        let user1 = req.session.user;
        let user2 = req.body.user2;
        const user1Form = await Form.findOne({idAuthor: user1._id});
        const user2Form = await Form.findOne({idAuthor: user2._id});
        if (user2Form.likes.includes(user1.idAuthor)) {                                                   //1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ª–∞–π–∫
            res.send("–í—ã —É–∂–µ —Å—Ç–∞–∏–≤–ª–∏ –ª–∞–π–∫ –¥–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!");
        } else {
            if (user2Form.likes.includes(user1Form.idAuthor)) {                                           // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –ª–∞–π–∫–Ω—É–ª–∏ –Ω–∞ –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫
                user1Form.likes.push(user2Form.idAuthor);
                console.log(user1Form, user2Form);
                user1Form.—Åomparison.push(user2Form.idAuthor);                                            // 3. –∑–∞–ø–∏—Å—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –∞–Ω–∫–µ—Ç—ã –¥–≤—É—Ö —é–∑–µ—Ä–æ–≤
                user2Form.—Åomparison.push(user1Form.idAuthor);
                // —Å–¥–µ–ª–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∫–ª–æ–Ω–Ω–∏–∫–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞ –ø–æ–∫–ª–æ–Ω–∏–∫–æ–≤ - user1Form.funs
                user1Form.save();
                user2Form.save();
                res.send("–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ!");
                // –°–¥–µ–ª–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –ø–∏—Å–µ–º –¥–≤—É–º —é–∑–µ—Ä–∞–º –æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏
            } else {
                user1Form.likes.push(user2Form.idAuthor);                                                  //4. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å–≤–æ–π –º–∞—Å—Å–∏–≤ –ª–∞–π–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫
                user1Form.save();

                async function main() {                                                                    //5. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ç–æ–º —á—Ç–æ –º—ã –µ–º—É –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫
                    let testAccount = await nodemailer.createTestAccount();
                    const transporter = nodemailer.createTransport({
                        host: "smtp.yandex.ru",
                        port: 465,
                        secure: true,
                        auth: {
                            user: "pekarnyavkusnaya",
                            pass: "pekarnyavkusnaya111"
                        }
                    });

                    let info = await transporter.sendMail({
                        from: '"Roomroom üëª" <pekarnyavkusnaya@yandex.ru>', // sender address
                        to: `igordg@mail.ru, ${user2.email}`, // list of receivers
                        subject: "Roomroom ‚úî", // Subject line
                        text: "–¢–µ–∫—Å—Ç1", // plain text body
                        html:
                            '<img src="https://gorod.tomsk.ru/uploads/33808/1240896561/my_room.jpg" alt="RoomRoom"><br>' +
                            '<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ù–∞ —Å–µ—Ä–≤–∏—Å–µ RoomRoom —É –í–∞—Å –ø–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ –ª–∞–π–∫–∏!</b>'
                                `<p>–õ–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${user1.first_name} ${user1.last_name}</p>`
                                `<p>–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –í–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ RoomRoom</p>`
                    });
                    console.log("Message sent: %s", info.messageId);
                    console.log("Preview URL: %s", nodemailer.getTestMessageUrl(info));
                    res.send("–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!");
                }
                main().catch(console.error);
                user2Form.funs.push(user1Form.idAuthor)                                                     // 6.–∑–∞–ø–∏—Å—å –Ω–∞—Å –≤ –º–∞—Å—Å–∏–≤ "–ø–æ–∫–ª–æ–Ω–Ω–∏–∫–æ–≤" –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user1Form.save();
                user2Form.save();
            }
        }
    } catch (error) {
        next(error);
    }
});

router.route("/api/findSimilarUsers").post(async (req, res, next) => {
    try {
        await console.log("–ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å");
        let user = req.session.user;
        const userForm = await Form.findOne({idAuthor: user._id});
        let arr1 = userForm.interest;
        let arr2 = [];
        let arr3 = await Form.find();
        for (let i = 0; i < arr3.length; i++) {
            if (arr1.location === arr3[i].location) {
                arr2.push(arr3[i]);
            }
        }
        let allComparison = [];

        arr2.map(function (e) {
            let —Åomparison = [];
            let userId = {idAuthor: e.idAuthor};
            let location = {location: e.location};
            let data = {data: e.data};
            let about = {about: e.about};
            let likes = {likes: e.likes};
            let prise = {prise: e.prise};

            —Åomparison.push(userId);
            —Åomparison.push(location);
            —Åomparison.push(data);
            —Åomparison.push(about);
            —Åomparison.push(likes);
            —Åomparison.push(prise);

            let arrInterests = [];
            for (let i = 0; i < arr1.interest.length; i++) {
                for (let k = 0; k < e.interest.length; k++) {
                    if (arr1.interest[i] === e.interest[k]) {
                        arrInterests.push(arr1.interest[i]);
                    }
                }
            }
            —Åomparison.push(arrInterests);
            allComparison.push(—Åomparison);
        });

        let lengthAllComparison = [];
        for (let i = 20; i >= 0; i--) {
            for (let j = 0; j < allComparison.length; j++) {
                if (allComparison[j][6].length === i) {
                    lengthAllComparison.push(allComparison[j]);
                }
            }
        }

        let finishREsult = [];

        for (let i = 0; i < lengthAllComparison.length; i++) {
            if (lengthAllComparison[i][6].length !== 0) {
                finishREsult.push(lengthAllComparison[i]);
            }
        }

        sortUserPrise = [];

        for (let i = 0; i < finishREsult.length; i++) {
            if (finishREsult[i][5].prise <= arr1.prise) {
                sortUserPrise.push(finishREsult[i]);
            }
        }

        console.log(sortUserPrise);

        let arrSortUserId = [];

        for (let i = 0; i < sortUserPrise.length; i++) {
            arrSortUserId.push(sortUserPrise[i][0].idAuthor);
        }
        console.log(arrSortUserId);
        res.json(sortUserPrise);
    } catch (error) {
        next(error);
    }
});


module.exports = router;
